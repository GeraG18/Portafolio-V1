---
/* Props here */
---

<div class="flex flex-col items-center justify-center gap-1">
    <div id="up-scroll-button" class="scroll-bar">
        <span class="material-symbols-rounded">
            keyboard_arrow_up
        </span>
        <div class="bar"></div>
    </div>

    <span id="scroll-span-inner" class="kode-mono !text-2xl text-[--text-gray]">--</span>

    <div id="down-scroll-button" class="scroll-bar">
        <div class="bar"></div>
        <span class="material-symbols-rounded">
            keyboard_arrow_down
        </span>
    </div>

    <span>
        <a id="home-button" class="hidden" href="#landing" aria-label="landing">
            landing
        </a>
        <a id="about-button" class="hidden" href="#about-me" aria-label="about-me">
            about-me
        </a>
        <a id="experience-button" class="hidden" href="#experience" aria-label="experience">
            experience
        </a>
        <a id="work-button" class="hidden" href="#work" aria-label="work">
            work
        </a>
        <a id="contact-button" class="hidden" href="#contact" aria-label="contact">
            contact
        </a>
    </span>
  
</div>

<style>
    .scroll-bar {
        width: 100%;
        height: 3.3rem;
        display: flex;
        flex-direction: column;
        gap: 0;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .scroll-bar .bar {
        width: 2px;
        flex: none;
        height: 2.2rem;
        background: var(--text-gray);
        font-size: 1rem;
    }

    .scroll-bar span {
        opacity: 1;
        transition: opacity 0.4s linear;
        color: var(--text-gray);
    }
    
    /* .scroll-bar:hover span{
        opacity: 1;
    } */

</style>

<script>
import { navigate } from "astro:transitions/client";

    document.addEventListener("astro:page-load", () => {

        /* number */
        let pageCounter: number = 1;

        /* array */
        let anchorIds = [
            "home-button",
            "about-button",
            "experience-button",
            "work-button",
            "contact-button",
        ];
       
        /* HTMLElement */
        let span: HTMLElement | null = document.getElementById('scroll-span-inner');
        let upButton: HTMLElement | null = document.getElementById('up-scroll-button');
        let downButton: HTMLElement | null = document.getElementById('down-scroll-button');
        const sections = document.querySelectorAll("section")
        const navItems = document.querySelectorAll("span a");
        
        /* Init Zone */
        span !== null ? span.innerText = pageCounter.toLocaleString('es-MX', {minimumIntegerDigits: 2,useGrouping: false}) : null;
    
        upButton !== null ? 
        upButton.addEventListener("click", (event) => {
            if(pageCounter !== 1) pageCounter --;
            clickElement(pageCounter - 1);
            span !== null ? span.innerText = pageCounter.toLocaleString('es-MX', {minimumIntegerDigits: 2,useGrouping: false}) : null;
        })
        : null;
    
        downButton !== null ? 
        downButton.addEventListener("click", (event) => {
            if(pageCounter !== 5) pageCounter ++;
            clickElement(pageCounter - 1);
            span !== null ? span.innerText = pageCounter.toLocaleString('es-MX', {minimumIntegerDigits: 2,useGrouping: false}) : null;
        })
        : null;

        navItems.forEach(anchor => {
            anchor.addEventListener('click', function (this: any,e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });
    
        /* Functions Zone */
        const clickElement = (index:number) => {
            let element = document.getElementById(anchorIds[index]);
            element ? element.click() : null;
        };

        const callback = (entries: any[]) => {
            entries.forEach((entry) => {
            if (entry.isIntersecting) {
                let index = anchorIds.findIndex((anchorId) => {
                    let htmlElement = document.getElementById(anchorId);
                    let atrribute: any = htmlElement ? htmlElement.getAttribute("aria-label"): '';
                    return atrribute.includes(entry.target.id);
                });
                if(index !== -1) pageCounter = index+1;
                span !== null ? span.innerText = pageCounter.toLocaleString('es-MX', {minimumIntegerDigits: 2,useGrouping: false}) : null;
            }
            })
        }
    
        const observer = new IntersectionObserver(callback, {
            root: null,
            rootMargin: "0px",
            threshold: 0.3,
        })
    
        sections.forEach((section) => {
            observer.observe(section)
        })
    
        // Cleanup function
        document.onvisibilitychange = () => {
            if (document.visibilityState === "hidden") {
            observer.disconnect()
            } else {
            sections.forEach((section) => {
                observer.observe(section)
            })
            }
        }
    });
 
</script>