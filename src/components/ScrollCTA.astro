---
/* props here */
---

<div id="scrollCTA-button" class="w-fit h-[5rem] cursor-pointer absolute right-1 md:right-auto bottom-0 hidden md:flex flex-col items-center justify-center opacity-90 z-[500]">
    <div class="scrollCTA__body" id="scrollCTA-body">
        <span class="material-symbols-rounded">
            keyboard_double_arrow_down
        </span>
    </div>
    <span class="scrollCTA__title" id="scrollCTA-title">DOWN</span>
</div>

<style>
    .scrollCTA__body {
        border: 1px solid var(--text-gray);
        border-radius: 9999px;
        width: 1.5rem;
        height: 3rem;
        flex: none;
        display: flex;
        justify-content: center;
        /* align-items: center; */
    }

    .scrollCTA__body span {
        -webkit-animation-duration: 1.8s;
        animation-duration: 1.8s;
        -webkit-animation-fill-mode: both;
        animation-fill-mode: both;
        -webkit-animation-iteration-count: infinite;
        animation-iteration-count: infinite;
        -webkit-animation-name: scroll;
        animation-name: scroll;
    }

    @keyframes scroll {
    0% {
        opacity: 1;
        -webkit-transform: translateY(0);
        -ms-transform: translateY(0);
        transform: translateY(0);
    }
    100% {
        opacity: 0;
        -webkit-transform: translateY(20px);
        -ms-transform: translateY(20px);
        transform: translateY(20px);
    }
    }

    .scrollCTA__title {
        flex: none;
        color: var(--text-gray);
        font-size: 1rem;
    }
</style>
<script>
    document.addEventListener("astro:page-load", () => {
        /* HTMLElement */
        let scrollCTAButton: HTMLElement | null = document.getElementById('scrollCTA-button');
        const sections = document.querySelectorAll("section")
        let scrollBody: HTMLElement | null = document.getElementById('scrollCTA-body');
        let scrollTitle: HTMLElement | null = document.getElementById('scrollCTA-title');
        console.log('SCROLL BODY', scrollBody);
        
        /* boolean */
        let flag = true; //true = +   false = -
    
        /* number */
        let pageCounter: number = 0;
        // let viewWidth: number = window.innerWidth;
        // let viewHeight: number = window.innerHeight;
    
         /* array */
        let anchorIds = [
            "home-button",
            "about-button",
            "experience-button",
            "work-button",
            "contact-button",
        ];
    
        /* Init Zone */
        scrollCTAButton !== null ? scrollCTAButton.addEventListener("click", (event) => {
            if(flag) { pageCounter ++ } else { pageCounter = 0 }
            clickElement(pageCounter);
            if(pageCounter === 0) {
                flag = true;
            }
            if(pageCounter === 4) {
                flag = false;
            }
            
            // scrollBody ? scrollBody.style.transform = `rotate(${flag ? '+' : '-'}180deg)` : null;
            // scrollTitle ? scrollTitle.innerHTML = `${flag ? 'DOWN' : 'UP'}` : null;
        }) : null;

        /* Functions Zone */
        const clickElement = (index:number) => {
            let element = document.getElementById(anchorIds[index]);
            element ? element.click() : null;
        };

        const callback = (entries: any[]) => {
            entries.forEach((entry) => {
            if (entry.isIntersecting) {
                let index = anchorIds.findIndex((anchorId) => {
                    let htmlElement = document.getElementById(anchorId);
                    let atrribute: any = htmlElement ? htmlElement.getAttribute("aria-label"): '';
                    return atrribute.includes(entry.target.id);
                });
                if(index !== -1) {
                    pageCounter = index;

                    if(pageCounter === 0) {
                        flag = true;
                        scrollBody ? scrollBody.style.transform = `rotate(0deg)` : null;
                    }

                    if(pageCounter === 4) {
                        flag = false;
                        scrollBody ? scrollBody.style.transform = `rotate(180deg)` : null;
                    }

                    scrollTitle ? scrollTitle.innerHTML = `${flag ? 'DOWN' : 'TOP'}` : null;
                }
            }
            })
        }
    
        const observer = new IntersectionObserver(callback, {
            root: null,
            rootMargin: "0px",
            threshold: 0.3,
        })
    
        sections.forEach((section) => {
            observer.observe(section)
        })
    
        // Cleanup function
        document.onvisibilitychange = () => {
            if (document.visibilityState === "hidden") {
            observer.disconnect()
            } else {
            sections.forEach((section) => {
                observer.observe(section)
            })
            }
        }
    });

</script>