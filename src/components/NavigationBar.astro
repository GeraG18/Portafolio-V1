---
/* Props here */
const currentPath = Astro.url.pathname;
// console.log('currentPath', currentPath);

---
<!-- (href !== '' && Astro.url.pathname.startsWith(href)) -->
<nav>
    <div class="group flex relative items-center justify-center rounded-full">
      <a id="home-button" class="nav-button bg-[--backgroundRGBA] backdrop-blur-sm supports-[backdrop-filter]:bg-[--backgroundRGBA] transition-all" href="#landing" aria-label="landing">
        <span class="material-symbols-rounded">
            home
        </span>
      </a>
      
      <div class="absolute left-0 items-center hidden ml-[4.5rem] group-hover:xl:flex h-fit">
        <span class="relative !min-w-fit w-full text-sm z-10 p-2 tooltip shadow-lg">
            Inicio
        </span>
      </div>
    </div>
    
    <div class="group flex relative items-center justify-center rounded-full">
      <a id="about-button" class="nav-button bg-[--backgroundRGBA] backdrop-blur-sm supports-[backdrop-filter]:bg-[--backgroundRGBA] transition-all" href="#about-me" aria-label="about-me">
        <span class="material-symbols-rounded">
            person
        </span>
      </a>
      
      <div class="absolute left-0 items-center hidden ml-[4.5rem] group-hover:xl:flex h-fit">
        <span class="relative !min-w-fit w-full z-10 p-2 tooltip shadow-lg">
            Sobre mi
        </span>
      </div>
    </div>

    <div class="group flex relative items-center justify-center rounded-full">
      <a id="experience-button" class="nav-button bg-[--backgroundRGBA] backdrop-blur-sm supports-[backdrop-filter]:bg-[--backgroundRGBA] transition-all" href="#experience" aria-label="experience">
        <span class="material-symbols-rounded">
            clinical_notes
        </span>
      </a>
      
      <div class="absolute left-0 items-center hidden ml-[4.5rem] group-hover:xl:flex h-fit">
        <span class="relative !min-w-fit w-full z-10 p-2 tooltip shadow-lg">
            Formación
        </span>
      </div>
    </div>

    <div class="group flex relative items-center justify-center rounded-full">
      <a id="work-button" class="nav-button bg-[--backgroundRGBA] backdrop-blur-sm supports-[backdrop-filter]:bg-[--backgroundRGBA] transition-all" href="#work" aria-label="work">
        <span class="material-symbols-rounded">
            lightbulb
        </span>
      </a>
      
      <div class="absolute left-0 items-center hidden ml-[4.5rem] group-hover:xl:flex h-fit">
        <span class="relative !min-w-fit w-full z-10 p-2 tooltip shadow-lg">
            Últimos trabajos
        </span>
      </div>
    </div>
      
    <div class="group flex relative items-center justify-center rounded-full">
      <a id="contact-button" class="nav-button bg-[--backgroundRGBA] backdrop-blur-sm supports-[backdrop-filter]:bg-[--backgroundRGBA] transition-all" href="#contact" aria-label="contact">
          <span class="material-symbols-rounded">
              mail
          </span>
      </a>
      
      <div class="absolute left-0 items-center hidden ml-[4.5rem] group-hover:xl:flex h-fit">
        <span class="relative !min-w-fit w-full z-10 p-2 tooltip shadow-lg">
            Contacto
        </span>
      </div>
    </div>

    <!-- <div class="group flex relative">
      <span class="bg-red-400 text-white px-2 py-1">Button</span>
      <span class="group-hover:opacity-100 transition-opacity bg-gray-800 px-1 text-sm !text-gray-100 rounded-md absolute left-1/2 
        translate-x-1/2 translate-y-full opacity-0 m-2 mx-auto p-4">Testing</span>
    </div> -->
</nav>
<style>
    nav {
        display: flex;
        flex-direction: row;
        gap: 1rem;
    }


    @media (min-width: 768px) {
      nav {
        flex-direction: column;
      }
    }

    .tooltip {
      color: var(--text-gray);
      border: 2px solid var(--text-gray);
      background-color: var(--background);
		  /* backdrop-filter: blur(6px); */
      border-radius: 999px;
      font-size: 0.9rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 10rem;
      animation: border-animation 2s infinite linear;
    }

    .nav-button {
        width: 4rem;
        height: 4rem;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid var(--text-gray);
        color: var(--text-gray);
        border-radius: 999px;
        cursor: pointer;
    }

    .active {
        border-color: var(--bright-accent);
        color: var(--bright-accent);
        /* background: linear-gradient(45deg, var(--accent-darker) 0%, var(--accent) 100%) ;
        color: white; */
        /* -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-fill-color: transparent;
        box-decoration-break: clone;
        -webkit-box-decoration-break: clone; */
    }

    .nav-button.active:hover{
      animation: none;
    }

    .nav-button:hover{
      animation: animation 2s infinite linear;
    }

    .nav-button span {
        font-size: 2rem;
    }

    @keyframes animation {
        50% {
            color: var(--new-accent);
            border-color: var(--new-accent);
        }
        100% {
            color:var(--text-gray);
            border-color:var(--text-gray);
        }
    }

    @keyframes border-animation {
        50% {
            /* color: var(--new-accent); */
            border-color: var(--new-accent);
        }
        100% {
            /* color:var(--text-gray); */
            border-color:var(--text-gray);
        }
    }
</style>
<script>
document.addEventListener("astro:page-load", () => {
    console.log('page load', window.location.pathname);
    if( window.location.pathname === '/') {

      const sections = document.querySelectorAll("#block-container section")
      const navItems = document.querySelectorAll("nav a")
      console.log('#block-container sections', sections);
      console.log('navItems', navItems);
  
      const callback = (entries: any[]) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            navItems.forEach((item) => {
              if (item.getAttribute("aria-label") == entry.target.id) {
                item.classList.add("active")
              } else {
                item.classList.remove("active")
              }
            })
          }
        })
      }
  
      const observer = new IntersectionObserver(callback, {
        root: null,
        rootMargin: "0px",
        threshold: 0.3,
      })
  
      sections.forEach((section) => {
        observer.observe(section)
      })
  
      // Cleanup function
      document.onvisibilitychange = () => {
        if (document.visibilityState === "hidden") {
          observer.disconnect()
        } else {
          sections.forEach((section) => {
            observer.observe(section)
          })
        }
      }
  
      navItems.forEach(anchor => {
        anchor.addEventListener('click', function (this: any,e) {
            e.preventDefault();
            console.log('sectionId id', this.getAttribute('href'));
            
            let test = document.querySelector(this.getAttribute('href')).scrollIntoView({
                behavior: 'smooth'
            });

            console.log('test', test);
            
        });
      });
    }
  }, {once: false})
</script>